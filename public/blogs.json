[
    {
        "_id": "659512282c5227e4dab829e1",
        "totalLikes": 0,
        "totalComments": 0,
        "bloggerImage":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQH-blsvoWQeqmoTzZB3tISQMu2dw8R6TY4IA&usqp=CAU",
        "bloggerName": "Asma Khan",
        "blogCategory": "programming",
        "publishingDate": "2023-11-08T16:57:21.994Z",
        "blogTitle": "There are 3 ways to stop forEach in JavaScript",
        "blogContent": "<p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*MoaTV0fSycy_nxoD\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@hhh13?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">傅甬 华</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p>Interviewer:&nbsp;<strong>Can you stop a forEach loop in JavaScript?</strong>&nbsp;This is a question I was once asked during an interview, and my initial response was,&nbsp;<strong>“No, I can’t do that.”</strong></p><p><strong>Unfortunately, my response led the interviewer to end the interview&nbsp;abruptly.</strong></p><p>Frustrated with the outcome, I asked the interviewer, “Why? Is it actually possible to stop a forEach loop in JavaScript?”</p><p>Before the interviewer could answer, I took a moment to explain my understanding of why we couldn’t directly stop a forEach loop in JavaScript.</p><h1>Is my answer correct?</h1><p>My friends, what numbers will be output by the following code?</p><p><br></p><p>Will it output just one number or more?</p><p>Yes, it will output ‘0’, ‘1’, ‘2’, ‘3’.</p><p>const array = [ -3, -2, -1, 0, 1, 2, 3 ]</p><p><br></p><p>array.forEach((it) =&gt; {</p><p>  if (it &gt;= 0) {</p><p>    console.log(it)</p><p>    return // or break</p><p>  }</p><p>})</p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*mWZMmBVWaP4ut8Hg.png\"></p><p>That’s right! I showed this code to the interviewer, but&nbsp;<strong>he still believed that we could stop a forEach loop in JavaScript.</strong></p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*p8xPlQcc9zJ5Wzcb\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@christnerfurt?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Christian Erfurt</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p><strong>Oh my God, you must be joking.</strong></p><h1>Why?</h1><p>In order to convince him, I had to implement the&nbsp;forEach&nbsp;simulation again.</p><p><br></p><p>Array.prototype.forEach2 = function (callback, thisCtx) {</p><p>  if (typeof callback !== 'function') {</p><p>    throw `${callback} is not a function`</p><p>  }</p><p><br></p><p>  const length = this.length</p><p>  let i = 0</p><p><br></p><p>  while (i &lt; length) {</p><p>    if (this.hasOwnProperty(i)) {</p><p>      // Note here：Each callback function will be executed once</p><p>      callback.call(thisCtx, this[ i ], i, this)</p><p>    }</p><p>    i++</p><p>  }</p><p>}</p><p>Yes, when we use ‘forEach’ to iterate through an array, the callback will be executed once for each element of the array, and there is no way we can break out of it…</p><p><br></p>",
        "documnetReadingTime": 5
    },
    {
        "_id": "659512282c5227e4dab829e1",
        "totalLikes": 0,
        "totalComments": 0,
        "bloggerImage":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQH-blsvoWQeqmoTzZB3tISQMu2dw8R6TY4IA&usqp=CAU",
        "bloggerName": "Asma Khan",
        "blogCategory": "programming",
        "publishingDate": "2023-11-08T16:57:21.994Z",
        "blogTitle": "There are 3 ways to stop forEach in JavaScript",
        "blogContent": "<p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*MoaTV0fSycy_nxoD\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@hhh13?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">傅甬 华</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p>Interviewer:&nbsp;<strong>Can you stop a forEach loop in JavaScript?</strong>&nbsp;This is a question I was once asked during an interview, and my initial response was,&nbsp;<strong>“No, I can’t do that.”</strong></p><p><strong>Unfortunately, my response led the interviewer to end the interview&nbsp;abruptly.</strong></p><p>Frustrated with the outcome, I asked the interviewer, “Why? Is it actually possible to stop a forEach loop in JavaScript?”</p><p>Before the interviewer could answer, I took a moment to explain my understanding of why we couldn’t directly stop a forEach loop in JavaScript.</p><h1>Is my answer correct?</h1><p>My friends, what numbers will be output by the following code?</p><p><br></p><p>Will it output just one number or more?</p><p>Yes, it will output ‘0’, ‘1’, ‘2’, ‘3’.</p><p>const array = [ -3, -2, -1, 0, 1, 2, 3 ]</p><p><br></p><p>array.forEach((it) =&gt; {</p><p>  if (it &gt;= 0) {</p><p>    console.log(it)</p><p>    return // or break</p><p>  }</p><p>})</p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*mWZMmBVWaP4ut8Hg.png\"></p><p>That’s right! I showed this code to the interviewer, but&nbsp;<strong>he still believed that we could stop a forEach loop in JavaScript.</strong></p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*p8xPlQcc9zJ5Wzcb\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@christnerfurt?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Christian Erfurt</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p><strong>Oh my God, you must be joking.</strong></p><h1>Why?</h1><p>In order to convince him, I had to implement the&nbsp;forEach&nbsp;simulation again.</p><p><br></p><p>Array.prototype.forEach2 = function (callback, thisCtx) {</p><p>  if (typeof callback !== 'function') {</p><p>    throw `${callback} is not a function`</p><p>  }</p><p><br></p><p>  const length = this.length</p><p>  let i = 0</p><p><br></p><p>  while (i &lt; length) {</p><p>    if (this.hasOwnProperty(i)) {</p><p>      // Note here：Each callback function will be executed once</p><p>      callback.call(thisCtx, this[ i ], i, this)</p><p>    }</p><p>    i++</p><p>  }</p><p>}</p><p>Yes, when we use ‘forEach’ to iterate through an array, the callback will be executed once for each element of the array, and there is no way we can break out of it…</p><p><br></p>",
        "documnetReadingTime": 5
    },
    {
        "_id": "659512282c5227e4dab829e1",
        "totalLikes": 0,
        "totalComments": 0,
        "bloggerImage":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQH-blsvoWQeqmoTzZB3tISQMu2dw8R6TY4IA&usqp=CAU",
        "bloggerName": "Asma Khan",
        "blogCategory": "programming",
        "publishingDate": "2023-11-08T16:57:21.994Z",
        "blogTitle": "There are 3 ways to stop forEach in JavaScript",
        "blogContent": "<p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*MoaTV0fSycy_nxoD\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@hhh13?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">傅甬 华</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p>Interviewer:&nbsp;<strong>Can you stop a forEach loop in JavaScript?</strong>&nbsp;This is a question I was once asked during an interview, and my initial response was,&nbsp;<strong>“No, I can’t do that.”</strong></p><p><strong>Unfortunately, my response led the interviewer to end the interview&nbsp;abruptly.</strong></p><p>Frustrated with the outcome, I asked the interviewer, “Why? Is it actually possible to stop a forEach loop in JavaScript?”</p><p>Before the interviewer could answer, I took a moment to explain my understanding of why we couldn’t directly stop a forEach loop in JavaScript.</p><h1>Is my answer correct?</h1><p>My friends, what numbers will be output by the following code?</p><p><br></p><p>Will it output just one number or more?</p><p>Yes, it will output ‘0’, ‘1’, ‘2’, ‘3’.</p><p>const array = [ -3, -2, -1, 0, 1, 2, 3 ]</p><p><br></p><p>array.forEach((it) =&gt; {</p><p>  if (it &gt;= 0) {</p><p>    console.log(it)</p><p>    return // or break</p><p>  }</p><p>})</p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*mWZMmBVWaP4ut8Hg.png\"></p><p>That’s right! I showed this code to the interviewer, but&nbsp;<strong>he still believed that we could stop a forEach loop in JavaScript.</strong></p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*p8xPlQcc9zJ5Wzcb\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@christnerfurt?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Christian Erfurt</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p><strong>Oh my God, you must be joking.</strong></p><h1>Why?</h1><p>In order to convince him, I had to implement the&nbsp;forEach&nbsp;simulation again.</p><p><br></p><p>Array.prototype.forEach2 = function (callback, thisCtx) {</p><p>  if (typeof callback !== 'function') {</p><p>    throw `${callback} is not a function`</p><p>  }</p><p><br></p><p>  const length = this.length</p><p>  let i = 0</p><p><br></p><p>  while (i &lt; length) {</p><p>    if (this.hasOwnProperty(i)) {</p><p>      // Note here：Each callback function will be executed once</p><p>      callback.call(thisCtx, this[ i ], i, this)</p><p>    }</p><p>    i++</p><p>  }</p><p>}</p><p>Yes, when we use ‘forEach’ to iterate through an array, the callback will be executed once for each element of the array, and there is no way we can break out of it…</p><p><br></p>",
        "documnetReadingTime": 5
    }
    ,{
        "_id": "659512282c5227e4dab829e1",
        "totalLikes": 0,
        "totalComments": 0,
        "bloggerImage":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQH-blsvoWQeqmoTzZB3tISQMu2dw8R6TY4IA&usqp=CAU",
        "bloggerName": "Asma Khan",
        "blogCategory": "programming",
        "publishingDate": "2023-11-08T16:57:21.994Z",
        "blogTitle": "There are 3 ways to stop forEach in JavaScript",
        "blogContent": "<p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*MoaTV0fSycy_nxoD\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@hhh13?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">傅甬 华</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p>Interviewer:&nbsp;<strong>Can you stop a forEach loop in JavaScript?</strong>&nbsp;This is a question I was once asked during an interview, and my initial response was,&nbsp;<strong>“No, I can’t do that.”</strong></p><p><strong>Unfortunately, my response led the interviewer to end the interview&nbsp;abruptly.</strong></p><p>Frustrated with the outcome, I asked the interviewer, “Why? Is it actually possible to stop a forEach loop in JavaScript?”</p><p>Before the interviewer could answer, I took a moment to explain my understanding of why we couldn’t directly stop a forEach loop in JavaScript.</p><h1>Is my answer correct?</h1><p>My friends, what numbers will be output by the following code?</p><p><br></p><p>Will it output just one number or more?</p><p>Yes, it will output ‘0’, ‘1’, ‘2’, ‘3’.</p><p>const array = [ -3, -2, -1, 0, 1, 2, 3 ]</p><p><br></p><p>array.forEach((it) =&gt; {</p><p>  if (it &gt;= 0) {</p><p>    console.log(it)</p><p>    return // or break</p><p>  }</p><p>})</p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*mWZMmBVWaP4ut8Hg.png\"></p><p>That’s right! I showed this code to the interviewer, but&nbsp;<strong>he still believed that we could stop a forEach loop in JavaScript.</strong></p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*p8xPlQcc9zJ5Wzcb\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@christnerfurt?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Christian Erfurt</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p><strong>Oh my God, you must be joking.</strong></p><h1>Why?</h1><p>In order to convince him, I had to implement the&nbsp;forEach&nbsp;simulation again.</p><p><br></p><p>Array.prototype.forEach2 = function (callback, thisCtx) {</p><p>  if (typeof callback !== 'function') {</p><p>    throw `${callback} is not a function`</p><p>  }</p><p><br></p><p>  const length = this.length</p><p>  let i = 0</p><p><br></p><p>  while (i &lt; length) {</p><p>    if (this.hasOwnProperty(i)) {</p><p>      // Note here：Each callback function will be executed once</p><p>      callback.call(thisCtx, this[ i ], i, this)</p><p>    }</p><p>    i++</p><p>  }</p><p>}</p><p>Yes, when we use ‘forEach’ to iterate through an array, the callback will be executed once for each element of the array, and there is no way we can break out of it…</p><p><br></p>",
        "documnetReadingTime": 5
    },
    {
        "_id": "659512282c5227e4dab829e1",
        "totalLikes": 0,
        "totalComments": 0,
        "bloggerImage":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQH-blsvoWQeqmoTzZB3tISQMu2dw8R6TY4IA&usqp=CAU",
        "bloggerName": "Asma Khan",
        "blogCategory": "programming",
        "publishingDate": "2023-11-08T16:57:21.994Z",
        "blogTitle": "There are 3 ways to stop forEach in JavaScript",
        "blogContent": "<p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*MoaTV0fSycy_nxoD\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@hhh13?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">傅甬 华</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p>Interviewer:&nbsp;<strong>Can you stop a forEach loop in JavaScript?</strong>&nbsp;This is a question I was once asked during an interview, and my initial response was,&nbsp;<strong>“No, I can’t do that.”</strong></p><p><strong>Unfortunately, my response led the interviewer to end the interview&nbsp;abruptly.</strong></p><p>Frustrated with the outcome, I asked the interviewer, “Why? Is it actually possible to stop a forEach loop in JavaScript?”</p><p>Before the interviewer could answer, I took a moment to explain my understanding of why we couldn’t directly stop a forEach loop in JavaScript.</p><h1>Is my answer correct?</h1><p>My friends, what numbers will be output by the following code?</p><p><br></p><p>Will it output just one number or more?</p><p>Yes, it will output ‘0’, ‘1’, ‘2’, ‘3’.</p><p>const array = [ -3, -2, -1, 0, 1, 2, 3 ]</p><p><br></p><p>array.forEach((it) =&gt; {</p><p>  if (it &gt;= 0) {</p><p>    console.log(it)</p><p>    return // or break</p><p>  }</p><p>})</p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*mWZMmBVWaP4ut8Hg.png\"></p><p>That’s right! I showed this code to the interviewer, but&nbsp;<strong>he still believed that we could stop a forEach loop in JavaScript.</strong></p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*p8xPlQcc9zJ5Wzcb\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@christnerfurt?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Christian Erfurt</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p><strong>Oh my God, you must be joking.</strong></p><h1>Why?</h1><p>In order to convince him, I had to implement the&nbsp;forEach&nbsp;simulation again.</p><p><br></p><p>Array.prototype.forEach2 = function (callback, thisCtx) {</p><p>  if (typeof callback !== 'function') {</p><p>    throw `${callback} is not a function`</p><p>  }</p><p><br></p><p>  const length = this.length</p><p>  let i = 0</p><p><br></p><p>  while (i &lt; length) {</p><p>    if (this.hasOwnProperty(i)) {</p><p>      // Note here：Each callback function will be executed once</p><p>      callback.call(thisCtx, this[ i ], i, this)</p><p>    }</p><p>    i++</p><p>  }</p><p>}</p><p>Yes, when we use ‘forEach’ to iterate through an array, the callback will be executed once for each element of the array, and there is no way we can break out of it…</p><p><br></p>",
        "documnetReadingTime": 5
    },
    {
        "_id": "659512282c5227e4dab829e1",
        "totalLikes": 0,
        "totalComments": 0,
        "bloggerImage":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQH-blsvoWQeqmoTzZB3tISQMu2dw8R6TY4IA&usqp=CAU",
        "bloggerName": "Asma Khan",
        "blogCategory": "programming",
        "publishingDate": "2023-11-08T16:57:21.994Z",
        "blogTitle": "There are 3 ways to stop forEach in JavaScript",
        "blogContent": "<p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*MoaTV0fSycy_nxoD\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@hhh13?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">傅甬 华</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p>Interviewer:&nbsp;<strong>Can you stop a forEach loop in JavaScript?</strong>&nbsp;This is a question I was once asked during an interview, and my initial response was,&nbsp;<strong>“No, I can’t do that.”</strong></p><p><strong>Unfortunately, my response led the interviewer to end the interview&nbsp;abruptly.</strong></p><p>Frustrated with the outcome, I asked the interviewer, “Why? Is it actually possible to stop a forEach loop in JavaScript?”</p><p>Before the interviewer could answer, I took a moment to explain my understanding of why we couldn’t directly stop a forEach loop in JavaScript.</p><h1>Is my answer correct?</h1><p>My friends, what numbers will be output by the following code?</p><p><br></p><p>Will it output just one number or more?</p><p>Yes, it will output ‘0’, ‘1’, ‘2’, ‘3’.</p><p>const array = [ -3, -2, -1, 0, 1, 2, 3 ]</p><p><br></p><p>array.forEach((it) =&gt; {</p><p>  if (it &gt;= 0) {</p><p>    console.log(it)</p><p>    return // or break</p><p>  }</p><p>})</p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*mWZMmBVWaP4ut8Hg.png\"></p><p>That’s right! I showed this code to the interviewer, but&nbsp;<strong>he still believed that we could stop a forEach loop in JavaScript.</strong></p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*p8xPlQcc9zJ5Wzcb\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@christnerfurt?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Christian Erfurt</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p><strong>Oh my God, you must be joking.</strong></p><h1>Why?</h1><p>In order to convince him, I had to implement the&nbsp;forEach&nbsp;simulation again.</p><p><br></p><p>Array.prototype.forEach2 = function (callback, thisCtx) {</p><p>  if (typeof callback !== 'function') {</p><p>    throw `${callback} is not a function`</p><p>  }</p><p><br></p><p>  const length = this.length</p><p>  let i = 0</p><p><br></p><p>  while (i &lt; length) {</p><p>    if (this.hasOwnProperty(i)) {</p><p>      // Note here：Each callback function will be executed once</p><p>      callback.call(thisCtx, this[ i ], i, this)</p><p>    }</p><p>    i++</p><p>  }</p><p>}</p><p>Yes, when we use ‘forEach’ to iterate through an array, the callback will be executed once for each element of the array, and there is no way we can break out of it…</p><p><br></p>",
        "documnetReadingTime": 5
    },
    {
        "_id": "659512282c5227e4dab829e1",
        "totalLikes": 0,
        "totalComments": 0,
        "bloggerImage":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQH-blsvoWQeqmoTzZB3tISQMu2dw8R6TY4IA&usqp=CAU",
        "bloggerName": "Asma Khan",
        "blogCategory": "programming",
        "publishingDate": "2023-11-08T16:57:21.994Z",
        "blogTitle": "There are 3 ways to stop forEach in JavaScript",
        "blogContent": "<p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*MoaTV0fSycy_nxoD\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@hhh13?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">傅甬 华</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p>Interviewer:&nbsp;<strong>Can you stop a forEach loop in JavaScript?</strong>&nbsp;This is a question I was once asked during an interview, and my initial response was,&nbsp;<strong>“No, I can’t do that.”</strong></p><p><strong>Unfortunately, my response led the interviewer to end the interview&nbsp;abruptly.</strong></p><p>Frustrated with the outcome, I asked the interviewer, “Why? Is it actually possible to stop a forEach loop in JavaScript?”</p><p>Before the interviewer could answer, I took a moment to explain my understanding of why we couldn’t directly stop a forEach loop in JavaScript.</p><h1>Is my answer correct?</h1><p>My friends, what numbers will be output by the following code?</p><p><br></p><p>Will it output just one number or more?</p><p>Yes, it will output ‘0’, ‘1’, ‘2’, ‘3’.</p><p>const array = [ -3, -2, -1, 0, 1, 2, 3 ]</p><p><br></p><p>array.forEach((it) =&gt; {</p><p>  if (it &gt;= 0) {</p><p>    console.log(it)</p><p>    return // or break</p><p>  }</p><p>})</p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*mWZMmBVWaP4ut8Hg.png\"></p><p>That’s right! I showed this code to the interviewer, but&nbsp;<strong>he still believed that we could stop a forEach loop in JavaScript.</strong></p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/0*p8xPlQcc9zJ5Wzcb\"></p><p>Photo by&nbsp;<a href=\"https://unsplash.com/@christnerfurt?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Christian Erfurt</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener noreferrer\" target=\"_blank\">Unsplash</a></p><p><strong>Oh my God, you must be joking.</strong></p><h1>Why?</h1><p>In order to convince him, I had to implement the&nbsp;forEach&nbsp;simulation again.</p><p><br></p><p>Array.prototype.forEach2 = function (callback, thisCtx) {</p><p>  if (typeof callback !== 'function') {</p><p>    throw `${callback} is not a function`</p><p>  }</p><p><br></p><p>  const length = this.length</p><p>  let i = 0</p><p><br></p><p>  while (i &lt; length) {</p><p>    if (this.hasOwnProperty(i)) {</p><p>      // Note here：Each callback function will be executed once</p><p>      callback.call(thisCtx, this[ i ], i, this)</p><p>    }</p><p>    i++</p><p>  }</p><p>}</p><p>Yes, when we use ‘forEach’ to iterate through an array, the callback will be executed once for each element of the array, and there is no way we can break out of it…</p><p><br></p>",
        "documnetReadingTime": 5
    }
]